[
  {
    "queId": "1",
    "courseName": "Using React Hooks",
    "question": "Value in useRef hook is accessed by which property?",
    "optOne": "value",
    "optTwo": "current",
    "optThree": "data",
    "optFour": "response",
    "answer": "current",
    "contributor": "Vivek Mishra"
  },
  {
    "queId": "2",
    "courseName": "Using React Hooks",
    "question": "The second argument of useEffect hook is",
    "optOne": "an array",
    "optTwo": "a string",
    "optThree": "an integer",
    "optFour": "an object",
    "answer": "an array",
    "contributor": "Vivek Mishra"
  },
  {
    "queId": "3",
    "courseName": "Using React Hooks",
    "question": "Which of the following is not a basic react hook?",
    "optOne": "useState",
    "optTwo": "useClass",
    "optThree": "useEffect",
    "optFour": "useContext",
    "answer": "useClass",
    "contributor": "Yash Joshi"
  },
  {
    "queId": "4",
    "courseName": "Using React Hooks",
    "question": "Which team has created the useMemo react hook?",
    "optOne": "Google",
    "optTwo": "Apple",
    "optThree": "Facebook",
    "optFour": "Microsoft",
    "answer": "Facebook",
    "contributor": "Yash Joshi"
  },
  {
    "queId": "5",
    "courseName": "Using React Hooks",
    "question": "UseLayoutEffect is similar to which component?",
    "optOne": "ComponentDidMount",
    "optTwo": "ComponentMount",
    "optThree": "ComponentDidUnmount",
    "optFour": "ComponentUnmount",
    "Option5": "option 1 and 3",
    "answer": "option 1 and 3",
    "contributor": "Kshitij Patil"
  },
  {
    "queId": "6",
    "courseName": "Using React Hooks",
    "question": "Which React hooks causes side effects? ",
    "optOne": "UseState",
    "optTwo": "UseRef",
    "optThree": "UseContext",
    "optFour": "UseEffect",
    "answer": "UseEffect",
    "contributor": "Kshitij Patil"
  },
  {
    "queId": "7",
    "courseName": "Using React Hooks",
    "question": "which hook is preferable instead of passing props at every level or using HOC's?",
    "optOne": "UseState",
    "optTwo": "UseContext",
    "optThree": "UseEffect",
    "optFour": "useCallback",
    "answer": "UseContext",
    "contributor": "Pallavi Derkar"
  },
  {
    "queId": "8",
    "courseName": "Using React Hooks",
    "question": "When we want to receive reference to a DOm element which hook is helpfull",
    "optOne": "UseState",
    "optTwo": "UseRef",
    "optThree": "UseContext",
    "optFour": "UseEffect",
    "answer": "UseRef",
    "contributor": "Pallavi Derkar"
  },
  {
    "queId": "9",
    "courseName": "Using React Hooks",
    "question": "In class component state variable is always in an _______",
    "optOne": "Array",
    "optTwo": "String",
    "optThree": "Object",
    "optFour": "Null",
    "answer": "Object",
    "contributor": "Shubham Suryawanshi"
  },
  {
    "queId": "10",
    "courseName": "Using React Hooks",
    "question": "______ is  used to control useEffect rendering.",
    "optOne": "setInterval",
    "optTwo": "Dependancy Array",
    "optThree": "return()",
    "optFour": "None",
    "answer": "Dependancy Array",
    "contributor": "Shubham Suryawanshi"
  },
  {
    "queId": "11",
    "courseName": "Using React Hooks",
    "question": "Which hook allows to do things after the component renders as well as after component unmounts?",
    "optOne": "useRef",
    "optTwo": "useState",
    "optThree": "useEffect",
    "optFour": "useReducer",
    "answer": "useEffect",
    "contributor": "Aishwarya Bhanage"
  },
  {
    "queId": "12",
    "courseName": "Using React Hooks",
    "question": "Reducer is a simple function that takes ______ as first parameter and action as second parameter.",
    "optOne": "currentState",
    "optTwo": "previousState",
    "optThree": "newState",
    "optFour": "nextState",
    "answer": "previousState",
    "contributor": "Aishwarya Bhanage"
  },
  {
    "queId": "13",
    "courseName": "Managing React State",
    "question": "React hooks have two rules known as the \"rules of hooks\". Which rule is NOT the rule of hooks?",
    "optOne": "Don’t call Hooks inside loops",
    "optTwo": "Only call Hooks from React function components or custom hook functions",
    "optThree": "Only call Hooks if you need local state in your component",
    "optFour": "Don’t call Hooks inside conditions",
    "Option5": "All the above",
    "answer": "Only call Hooks if you need local state in your component",
    "contributor": "Saloni Gupta"
  },
  {
    "queId": "14",
    "courseName": "Using React Hooks",
    "question": "You render the following React app:                                                                                                                                     \r\nconst App = () => {\r\n  const [state, setState] = useState(2);\r\n  setTimeout(() => setState(3), 5000);\r\n  return <input defaultValue=\"0\"/>\r\n};\r\n\r\nReactDOM.render(<App />, mountNode);\r\nYou then type the number 1 in the input box (within the first five seconds). What is the value of the input box after five seconds?",
    "optOne": "1",
    "optTwo": "0",
    "optThree": "3",
    "optFour": "2",
    "answer": "1",
    "contributor": "Saloni Gupta"
  },
  {
    "queId": "15",
    "courseName": "Using React Hooks",
    "question": "Which React hook is most similar to useState",
    "optOne": "useMemo",
    "optTwo": "useContext",
    "optThree": "useReaducer",
    "optFour": "useCallback",
    "answer": "useReducer",
    "contributor": "Shreya Bakshi"
  },
  {
    "queId": "16",
    "courseName": "Using React Hooks",
    "question": "In a class component, what call would you use if you want to reference a DOM element?",
    "optOne": "React.createRef()",
    "optTwo": "React.newRef()",
    "optThree": "React.initRef()",
    "optFour": "React.useRef()",
    "answer": "React.createRef()",
    "contributor": "Shreya Bakshi"
  },
  {
    "queId": "17",
    "courseName": "Using React Hooks",
    "question": "useState is build on which hook?",
    "optOne": "useReducer",
    "optTwo": "useCallback",
    "optThree": "useMemo",
    "optFour": "None",
    "answer": "useReducer",
    "contributor": "Harsh Gupta"
  },
  {
    "queId": "18",
    "courseName": "Using React Hooks",
    "question": "What is the naming convention for Hooks function?",
    "optOne": "use prefix",
    "optTwo": "camel case",
    "optThree": "both",
    "optFour": "none",
    "answer": "Both",
    "contributor": "Harsh Gupta"
  },
  {
    "queId": "19",
    "courseName": "Optimize Performance for React",
    "question": "Which React wrapper component must you use around a lazy loaded component?",
    "optOne": "React.Load",
    "optTwo": "React.Lazy",
    "optThree": "React.FallBack",
    "optFour": "React.Suspense",
    "answer": "React.Suspense",
    "contributor": "Saloni Gupta"
  },
  {
    "queId": "20",
    "courseName": "Optimize Performance for React",
    "question": "Your component returns the following JSX:\r\n                                           <div>                                                                                                                         <div>hello</div>\r\n</div>\r\nThe underlying state gets updated and your component returns the following JSX:\r\n<span>\r\n  <div>hello</div>\r\n</span>\r\nHow did React handle the transition from the first example to the second?",
    "optOne": "React does not support this and will throw a TypeInvariant error.",
    "optTwo": "React replaced the DOM for the whole component, because the root element is of a different type.",
    "optThree": "React made a new element of type span, then copied the old children into the new element and then deleted the old root div.",
    "optFour": "React selectively updated the components, changing the root DOM element to a span.",
    "answer": "React replaced the DOM for the whole component, because the root element is of a different type.",
    "contributor": "Saloni Gupta"
  },
  {
    "queId": "21",
    "courseName": "React State: Redux & Context& Hooks",
    "question": "                                                                   What will the following code do?                                                                                                                              const App = ({ v }) => {\r\n  v = 42;\r\n  return <div>{v}</div>\r\n                                                                       };                                                                                                                                                                                                               ReactDOM.render(<App v={37} />, mountNode);",
    "optOne": "Render: <div>37</div>",
    "optTwo": "Throw the error:  Assignment to constant variable.",
    "optThree": "Throw the error: React props are immutable",
    "optFour": "Render: <div>42</div>",
    "answer": "Render: <div>42</div>",
    "contributor": "Saloni Gupta"
  },
  {
    "queId": "22",
    "courseName": "React State: Redux & Context& Hooks",
    "question": "Which of the following allows time travel debugging?",
    "optOne": "Hooks",
    "optTwo": "Context",
    "optThree": "Redux",
    "optFour": "None",
    "answer": "Redux",
    "contributor": "Saloni Gupta"
  },
  {
    "queId": "23",
    "courseName": "React State: Redux & Context& Hooks",
    "question": "MobX is easy to scale and maintain. State true or false",
    "optOne": "TRUE",
    "optTwo": "FALSE",
    "answer": "FALSE",
    "contributor": "Sahana Raj"
  },
  {
    "queId": "24",
    "courseName": "React State: Redux & Context& Hooks",
    "question": "Which of these is not true about Redux?",
    "optOne": "Avoids Props drilling",
    "optTwo": "Data is stored globally",
    "optThree": "Add ons such as thunk can be used",
    "optFour": "Has mutable state",
    "answer": "Has mutable state",
    "contributor": "Sahana Raj"
  },
  {
    "queId": "25",
    "courseName": "Managing React State",
    "question": "React won't re-render when a _____ variable changes.",
    "optOne": "state",
    "optTwo": "prop",
    "optThree": "plain",
    "optFour": "context",
    "answer": "plain",
    "contributor": "Aishwarya Bhanage"
  },
  {
    "queId": "26",
    "courseName": "Managing React State",
    "question": "In useEffect, what is the meaning of declaring dependency array as empty?",
    "optOne": "Run useEffect only once after first render",
    "optTwo": "Run useEffect only once before first render",
    "optThree": "Run useEffect multiple times after first render",
    "optFour": "Run useEffect multiple times before first render",
    "answer": "Run useEffect only once after first render",
    "contributor": "Aishwarya Bhanage"
  },
  {
    "queId": "27",
    "courseName": "Using React Hooks",
    "question": "What does the third arg in useReducer represent?",
    "optOne": "Initial state",
    "optTwo": "dispatch",
    "optThree": "init function",
    "optFour": "action",
    "answer": "init function",
    "contributor": "Sahana Raj"
  },
  {
    "queId": "28",
    "courseName": "Using React Hooks",
    "question": "What are the 2 args that a useMemo hook accepts?",
    "optOne": "Function and list of dependencies",
    "optTwo": "Current state and next state",
    "optThree": "Current state and list of dependencies",
    "optFour": "Function and next state",
    "answer": "Function and list of dependencies",
    "contributor": "Sahana Raj"
  },
  {
    "queId": "29",
    "courseName": "Using React Hooks",
    "question": "Which functionality of react hooks is used to allow access directly to an element in the DOM?",
    "optOne": "useState",
    "optTwo": "useRef",
    "optThree": "useEffect",
    "optFour": "None of the above",
    "Option5": "both a and b",
    "answer": "useRef",
    "contributor": "Akshay Ingle"
  },
  {
    "queId": "30",
    "courseName": "Using React Hooks",
    "question": "2-way data binding is achieved by which react hook?",
    "optOne": "useState",
    "optTwo": "useRef",
    "optThree": "useEffect",
    "optFour": "None of the above",
    "Option5": "both a and c",
    "answer": "useState",
    "contributor": "Sriyancy Palakurthi"
  },
  {
    "queId": "31",
    "courseName": "Using React Hooks",
    "question": "React way of allowing us to attach reusable logic to existing component is achieved by?",
    "optOne": "Class component",
    "optTwo": "existing component",
    "optThree": "HOC",
    "optFour": "react hooks",
    "Option5": "none",
    "answer": "react hooks",
    "contributor": "Sriyancy Palakurthi"
  },
  {
    "queId": "32",
    "courseName": "Using React Hooks",
    "question": "If the array parameter of useEffect is empty, how often useEffect is called?",
    "optOne": "Array must have a value",
    "optTwo": "Called once before component is mounted",
    "optThree": "Called once when the component is first mounted",
    "optFour": "Depends on function rendering",
    "Option5": "none of the above",
    "answer": "Called once when the component is first mounted",
    "contributor": "Akshay Ingle"
  },
  {
    "queId": "33",
    "courseName": "Managing React State",
    "question": "which of the following is used to persist state between reloads?",
    "optOne": "cookies",
    "optTwo": "localStorage",
    "optThree": "IndexedDB",
    "optFour": "all",
    "Option5": "none of the above",
    "answer": "all",
    "contributor": "Sriyancy Palakurthi"
  },
  {
    "queId": "34",
    "courseName": "Managing React State",
    "question": "which of the following is true?  a)react tracks the order the hooks are run so it can store corresponding data.b)react doesnt tracks the order the hooks are run so it can store corresponding data. c) hooks can be used inside conditional statements d) hooks cannot be used in conditional statement                                               ",
    "optOne": "a,c",
    "optTwo": "a,d",
    "optThree": "b,c",
    "optFour": "b,d",
    "Option5": "none of the above",
    "answer": "a,d",
    "contributor": "Sriyancy Palakurthi"
  },
  {
    "queId": "35",
    "courseName": "Managing React State",
    "question": "Which of the following is not a rule of hooks?",
    "optOne": "Hooks are of function component",
    "optTwo": " They can be declared within class component",
    "optThree": "Hooks must start with the word use",
    "optFour": "They can only be called at the top level",
    "Option5": "none of the above",
    "answer": "They can be declared within class component",
    "contributor": "Akshay Ingle"
  },
  {
    "queId": "36",
    "courseName": "Managing React State",
    "question": "Which of the following about Ref is true?",
    "optOne": "Refs cannot hold a DOM element reference",
    "optTwo": "Refs are not used for interfacing with third party libraries.",
    "optThree": "Refs are useful for managing uncontrolled  components.",
    "optFour": "Both (1) and (3)",
    "Option5": "none of the above",
    "answer": "Refs are useful for managing uncontrolled  components.",
    "contributor": "Akshay Ingle"
  },
  {
    "queId": "37",
    "courseName": "React State: Redux & Context& Hooks",
    "question": "what are predictable state container for javascript apps ?",
    "optOne": "flux",
    "optTwo": "redux",
    "optThree": "flux,redux",
    "optFour": "mobx",
    "Option5": "none of the above",
    "answer": "redux",
    "contributor": "Sriyancy Palakurthi"
  },
  {
    "queId": "38",
    "courseName": "React State: Redux & Context& Hooks",
    "question": "what is the react own internal solution for prop drilling ?",
    "optOne": "flux",
    "optTwo": "redux",
    "optThree": "contextAPI",
    "optFour": "hooks",
    "Option5": "all of the above",
    "answer": "contextAPI",
    "contributor": "Sriyancy Palakurthi"
  },
  {
    "queId": "39",
    "courseName": "Optimize Performance for React",
    "question": "what are to be done to achieve optimization in our react app?",
    "optOne": "to avoid wasted renders",
    "optTwo": "reduce bundle size",
    "optThree": "to handle expensive opertaions",
    "optFour": "all the above ",
    "Option5": "only option 1 and 3",
    "answer": "all the above",
    "contributor": "Sriyancy Palakurthi"
  },
  {
    "queId": "40",
    "courseName": "Optimize Performance for React",
    "question": "which among following is true?",
    "optOne": "useCallback is memorized version of callback ",
    "optTwo": "useCallback generates a function that only changes when we pass different things in array of dependencies",
    "optThree": "useCallback generates a function that only changes when we pass empty array",
    "optFour": "option 1 and 2",
    "Option5": "option 1 and 3",
    "answer": "option 1 and 2",
    "contributor": "Sriyancy Palakurthi"
  },
  {
    "queId": "41",
    "courseName": "using React Hooks",
    "question": "Which React hook is similar to using mixins? ",
    "optOne": "useReducer",
    "optTwo": "useContext",
    "optThree": "useMemo",
    "optFour": "useCallback",
    "answer": "useContext",
    "contributor": "Minal Bitne"
  },
  {
    "queId": "42",
    "courseName": "using React Hooks",
    "question": "State True or False useRef mainly used to allow access directly to an element in the DOM",
    "optOne": "TRUE",
    "optTwo": "FALSE",
    "answer": "TRUE",
    "contributor": "Minal Bitne"
  },
  {
    "queId": "43",
    "courseName": "Managing React State",
    "question": "Error Boundaries do not catch errors for?",
    "optOne": "Event handlers",
    "optTwo": "Asynchronous code",
    "optThree": "Server side rendering",
    "optFour": "Errors thrown in error boundary itself",
    "Option5": "All of the above",
    "answer": "All of the above",
    "contributor": "Yash Chauhan"
  },
  {
    "queId": "44",
    "courseName": "Managing React State",
    "question": "Which of the following represent Nullish coalescing operator?",
    "optOne": "||",
    "optTwo": "&&",
    "optThree": "??",
    "optFour": "None of the above",
    "answer": "??",
    "contributor": "Yash Chauhan"
  },
  {
    "queId": "45",
    "courseName": "Managing React State",
    "question": "Data declared outside of functions get recreated on each render of a component",
    "optOne": "TRUE",
    "optTwo": "FALSE",
    "answer": "FALSE",
    "contributor": "Vivek Mishra"
  },
  {
    "queId": "46",
    "courseName": "Managing React State",
    "question": "A useState variable can be passed as an argument to a function",
    "optOne": "TRUE",
    "optTwo": "FALSE",
    "answer": "TRUE",
    "contributor": "Vivek Mishra"
  },
  {
    "queId": "47",
    "courseName": "Using React Hooks",
    "question": "Which expression is correct regarding data sharing between components in react?",
    "optOne": "Props goes Down, Functions goes Down",
    "optTwo": "Props goes Up, Functions goes Down",
    "optThree": "Props goes Down, Functions goes Up",
    "optFour": "Props goes Up, Functions goes Up",
    "answer": "Props goes Down, Functions goes Up",
    "contributor": "Saloni Gupta"
  },
  {
    "queId": "48",
    "courseName": "Managing React State",
    "question": "Why can't you use React hooks within loops and conditions?",
    "optOne": "Because React uses the order of defined hooks to preserve their state",
    "optTwo": "Because loops and conditions might have a different closure than the main function component's closure",
    "optThree": "Because it encourages bad practices that end up in infinite loops",
    "optFour": "Because React uses the caller to identify what component a hook belongs to and loops and conditions might change that caller value",
    "answer": "Because React uses the order of defined hooks to preserve their state",
    "contributor": "Saloni Gupta"
  },
  {
    "queId": "49",
    "courseName": "Using React Hooks",
    "question": "What  is the best candidate for sharing data between different components in React hooks?",
    "optOne": "useEffect",
    "optTwo": "useRef",
    "optThree": "useContext",
    "optFour": "useCallback",
    "answer": "useContext",
    "contributor": "Sripriya Perumandla"
  },
  {
    "queId": "50",
    "courseName": "Using React Hooks",
    "question": "Any Javascript object can be passed to a custom react hook. State True or False.",
    "optOne": "TRUE",
    "optTwo": "FALSE",
    "answer": "TRUE",
    "contributor": "Sripriya Perumandla"
  },
  {
    "queId": "51",
    "courseName": "Using React Hooks",
    "question": "Which ReactHook  can be used to get similar results as method setState? ",
    "optOne": "useRef",
    "optTwo": "useContext",
    "optThree": "useState",
    "optFour": "useMemo",
    "Option5": "None of the above",
    "answer": "useState",
    "contributor": "Saloni Dakhole"
  },
  {
    "queId": "52",
    "courseName": "Using React Hooks",
    "question": "___________allows passing properties through one or more layers of component hierarchy.",
    "optOne": "Event handlers",
    "optTwo": "Prop-Drilling",
    "optThree": "Hooks must start with the word use",
    "optFour": "contextAPI",
    "Option5": "Flux",
    "answer": "Prop-Drilling",
    "contributor": "Saloni Dakhole"
  },
  {
    "queId": "53",
    "courseName": "Managing React State",
    "question": "What are useful for managing uncontrolled components?",
    "optOne": "State",
    "optTwo": "props ",
    "optThree": "Refs ",
    "answer": "Refs ",
    "contributor": "Sripriya Perumandla"
  },
  {
    "queId": "54",
    "courseName": "Managing React State",
    "question": "Which of the following avoids having to pass props down to every component?",
    "optOne": "Refs",
    "optTwo": "state",
    "optThree": "context",
    "answer": "Context",
    "contributor": "Sripriya Perumandla"
  },
  {
    "queId": "55",
    "courseName": "optimize Performance for React",
    "question": "PureComponents are the special React Components that will be only called upon to render when they receive same prop values.",
    "optOne": "TRUE",
    "optTwo": "FALSE",
    "answer": "FALSE(They render when they receive different prop values)",
    "contributor": "Saloni Dakhole"
  },
  {
    "queId": "56",
    "courseName": "Optimize Performance for React",
    "question": "What should be used when we have a class Component and need to perform specific checks on the props being passed?",
    "optOne": "PureComponents",
    "optTwo": "shouldComponentUpdate",
    "optThree": "react.Memo",
    "optFour": "useMemo",
    "answer": "shouldComponentUpdate",
    "contributor": "Saloni Dakhole"
  },
  {
    "queId": "57",
    "courseName": "Optimize Performance for React",
    "question": "How can the bundle size of react app be reduced?",
    "optOne": "By using production build",
    "optTwo": "Preventing wasted renders",
    "optThree": "By using lazy loading",
    "optFour": "By using custom hooks",
    "answer": "By using production build",
    "contributor": "Sahana Raj"
  },
  {
    "queId": "58",
    "courseName": "optimize Performance for React",
    "question": " Which of the following is NOT a part of React?",
    "optOne": "lazy",
    "optTwo": "Suspense",
    "optThree": "useCreate",
    "optFour": "useState",
    "answer": "useCreate",
    "contributor": "Sahana Raj"
  },
  {
    "queId": "59",
    "courseName": "Managing React State",
    "question": "Which 3rd party library can be used to handle local state in React?",
    "optOne": "Redux",
    "optTwo": "XState",
    "optThree": "Context API",
    "optFour": "Recoil",
    "answer": "XState",
    "contributor": "Sahana Raj"
  },
  {
    "queId": "60",
    "courseName": "Managing React State",
    "question": "What is the use of Immer in React?",
    "optOne": "Allows to work with mutable state",
    "optTwo": "Helps fetch server data",
    "optThree": "Allows to work with immutable state",
    "optFour": "Helps build complex forms",
    "answer": "Allows to work with immutable state",
    "contributor": "Sahana Raj"
  },
  {
    "queId": "61",
    "courseName": "react State: Redux & Context& Hooks"
  },
  {
    "queId": "62",
    "courseName": "Managing React State",
    "question": "Which is not way to store data in browser?",
    "optOne": "sessionStorage",
    "optTwo": "localStorage",
    "optThree": "sessionDB",
    "optFour": "indexedDB",
    "answer": "sessionDB",
    "contributor": "Shubham Suryawanshi"
  },
  {
    "queId": "63",
    "courseName": "          Managing React State",
    "question": "Reducer Always Returns________",
    "optOne": "Dispatcher",
    "optTwo": "Object",
    "optThree": "newState",
    "optFour": "action",
    "answer": "newState",
    "contributor": "Shubham Suryawanshi"
  },
  {
    "queId": "64",
    "courseName": "Managing React State",
    "question": "Which is the most suitable option while declaring state?",
    "optOne": "State should be available to all components",
    "optTwo": "State should be available to only one component",
    "optThree": "State should be available to relevent components",
    "optFour": "none of these",
    "answer": "State should be available to relevent components",
    "contributor": "Shreya Bakshi"
  },
  {
    "queId": "65",
    "courseName": "Managing React State",
    "question": "React setState syntax is async and batched.",
    "optOne": "TRUE",
    "optTwo": "FALSE",
    "answer": "TRUE",
    "contributor": "Shreya Bakshi"
  },
  {
    "queId": "66",
    "courseName": "react State: Redux & Context& Hooks",
    "question": "Context API has much less tooling than Redux which actually uses context internally.",
    "optOne": "TRUE",
    "optTwo": "FALSE",
    "answer": "TRUE",
    "contributor": "Saloni Dakhole"
  },
  {
    "queId": "67",
    "courseName": "React State: Redux & Context& Hooks",
    "question": "Advantages of using Redux as a part of React app",
    "optOne": "States are Immutable",
    "optTwo": "It avoids prop-drilling",
    "optThree": "Data is stored locally",
    "optFour": "Only 1 and 2",
    "Option5": "All 1,2 and 3",
    "answer": "Only 1 and 2 ",
    "contributor": "Saloni Dakhole"
  },
  {
    "queId": "68",
    "courseName": "Using React Hooks",
    "question": "Advantage of creating project with Next.js",
    "optOne": "server side rendering",
    "optTwo": "Excellent SEO",
    "optThree": "Both 1 and 2",
    "optFour": "None",
    "answer": "Both 1 and 2",
    "contributor": "Saket Saurav"
  },
  {
    "queId": "69",
    "courseName": "Using React Hooks",
    "question": "State in a React is ",
    "optOne": "A Permanent Storage",
    "optTwo": "Internal Storage of the Component",
    "optThree": "Both of Above",
    "optFour": "None",
    "answer": "Internal Storage of Component",
    "contributor": "Saket Saurav"
  },
  {
    "queId": "70",
    "courseName": "Managing React State",
    "question": "Props in React can",
    "optOne": "Be changed inside the component",
    "optTwo": "Not be changed inside the component",
    "optThree": "Be changed in side other component",
    "optFour": "None ",
    "answer": "Not be changed in the component",
    "contributor": "Saket Saurav"
  },
  {
    "queId": "71",
    "courseName": "Optimize Performance for React",
    "question": "Recommended way to identify wasted renders?",
    "optOne": "using the React performance profiler",
    "optTwo": "using console.log statements",
    "optThree": "performance output build",
    "optFour": "npm module that help you track it",
    "answer": "using the React performance profiler",
    "contributor": "Harsh Gupta"
  },
  {
    "queId": "72",
    "courseName": "Optimize Performance for React",
    "question": "What could you try to make the initial load for animation faster?",
    "optOne": "Use lazy and Suspense to load content on demand",
    "optTwo": "Use better CDN ",
    "optThree": "npm module that help you load animation faster",
    "optFour": "none of the above",
    "answer": "Use lazy and Suspense to load content on demand",
    "contributor": "Harsh Gupta"
  },
  {
    "queId": "73",
    "courseName": "\r\nManaging React State",
    "question": "React state should be treated as _?",
    "optOne": "immutable",
    "optTwo": "mutable",
    "answer": "immutable",
    "contributor": "Harsh Gupta"
  },
  {
    "queId": "74",
    "courseName": "\r\nManaging React State",
    "question": "Select all options which help you build complex forms. ",
    "optOne": "Form state libraries",
    "optTwo": "Formik ",
    "optThree": "React Hook Form",
    "optFour": "All of the these",
    "answer": "All of these",
    "contributor": "Harsh Gupta"
  },
  {
    "queId": "75",
    "courseName": "React State: Redux & Context& Hooks",
    "question": "_________ is a predictable state container for javascript apps.",
    "optOne": "Redux",
    "optTwo": "Prop-drilling",
    "optThree": "Context API",
    "optFour": "React Hooks",
    "Option5": "none of the above",
    "answer": "Redux",
    "contributor": "Akshay Ingle"
  },
  {
    "queId": "76",
    "courseName": "React State: Redux & Context& Hooks",
    "question": "The problem caused while working with a lot of states and components gives rise to ___________.",
    "optOne": "Invalid hook call",
    "optTwo": "Mismatch React DOM",
    "optThree": "More computation",
    "optFour": "Prop-drilling",
    "Option5": "none of the above",
    "answer": "Prop-Drilling",
    "contributor": "Akshay Ingle"
  },
  {
    "queId": "77",
    "courseName": "Optimize Performance for React",
    "question": "The problem of multiple rendering issue can be resolved using?",
    "optOne": "Adjusting the profiler",
    "optTwo": "Changing component to pure component",
    "optThree": "Wrapping the button in useCallback",
    "optFour": "It can't be fixed in function component",
    "Option5": "none of the above",
    "answer": "Wrapping the button in useCallback",
    "contributor": "Akshay Ingle"
  },
  {
    "queId": "78",
    "courseName": "Optimize Performance for React",
    "question": " When you've got expensive, long‑running operations, you want to cache the results, this can be done using?",
    "optOne": "useState",
    "optTwo": "useEffect",
    "optThree": "useMemo",
    "optFour": "useCallback",
    "Option5": "none of the above",
    "answer": "useMemo",
    "contributor": "Akshay Ingle"
  },
  {
    "queId": "79",
    "courseName": "using react hooks",
    "question": "The useEffect hook has same purpose as",
    "optOne": "componentDidMount",
    "optTwo": "componentDidUpdate",
    "optThree": "componentWillUnmount",
    "optFour": "All of the above",
    "Option5": "none of the above",
    "answer": "All of the above",
    "contributor": "Abhipsha Mahapatra"
  },
  {
    "queId": "80",
    "courseName": "Managing React State",
    "question": "What kind of component import React from 'react' is?",
    "optOne": "Action->Dispatcher->View->Store",
    "optTwo": "Action->Dispatcher->Store->View",
    "optThree": "Action->Store->Dispatcher->View",
    "optFour": "None of the above",
    "answer": "Action->Dispatcher->Store->View",
    "contributor": "Abhipsha Mahapatra"
  },
  {
    "queId": "81",
    "courseName": "Optimize Performance for React",
    "question": "Which hook gives you referential equality between renders for functions?",
    "optOne": "useMemo",
    "optTwo": "useCallback ",
    "optThree": "useRef",
    "optFour": "None of the above",
    "answer": "useCallback",
    "contributor": "Yash Chauhan"
  },
  {
    "queId": "82",
    "courseName": "Optimize Performance for React",
    "question": "React.memo() is the functional component equivalent of React.PureComponent() in class component?",
    "optOne": "TRUE",
    "optTwo": "FALSE",
    "answer": "TRUE",
    "contributor": "Yash Chauhan"
  },
  {
    "queId": "83",
    "courseName": "React Hooks",
    "question": "the purpose of useEffect hook is to perform side effects in functional components",
    "optOne": "TRUE",
    "optTwo": "FALSE",
    "answer": "TRUE",
    "contributor": "Susriya Rampalli"
  },
  {
    "queId": "84",
    "courseName": "React Hooks",
    "question": "Will react hooks work inside class components?",
    "optOne": "YES",
    "optTwo": "NO",
    "answer": "NO",
    "contributor": "Susriya Rampalli"
  },
  {
    "queId": "85",
    "courseName": "React State: Redux & Context",
    "question": " ___is just an easy way to render HTML in our reactor components stands for Java or JavaScript XML ?",
    "optOne": "JSX",
    "optTwo": "HTML",
    "optThree": "Javascript",
    "optFour": "All of these",
    "answer": "JSX",
    "contributor": "Harsh Gupta"
  },
  {
    "queId": "86",
    "courseName": "React State: Redux & Context",
    "question": "React is created by?",
    "optOne": "Google",
    "optTwo": "Yahoo",
    "optThree": "Microsoft",
    "optFour": "Facebook",
    "answer": "Facebook",
    "contributor": "Harsh Gupta"
  },
  {
    "queId": "87",
    "courseName": "Using React Hooks",
    "question": "How many elements does a react component return?",
    "optOne": "2 Elements",
    "optTwo": "1 Element",
    "optThree": "Multiple Elements",
    "optFour": "None of these",
    "answer": "Multiple Elements",
    "contributor": "Sneh Verma"
  },
  {
    "queId": "88",
    "courseName": "Using React Hooks",
    "question": "Hooks be called inside conditions, loops, or nested functions.",
    "optOne": "TRUE",
    "optTwo": "FALSE",
    "answer": "FALSE",
    "contributor": "Sneh Verma"
  },
  {
    "queId": "89",
    "courseName": "Managing React State",
    "question": "What happens when you call setState() inside render() method?",
    "optOne": "Repetitive output appears on the screen",
    "optTwo": "No Error happens",
    "optThree": "Duplicate Key Error",
    "optFour": "Stack Overflow Error",
    "answer": "Stack Overflow Error",
    "contributor": "Sneh Verma"
  },
  {
    "queId": "90",
    "courseName": "Managing React State",
    "question": "The state in react can be updated by call to setState method. These calls are _________",
    "optOne": "Synchronous in nature",
    "optTwo": "Asynchronous in nature",
    "optThree": "Are asynchronous but can be made synchronous when required",
    "optFour": "None of the above",
    "answer": "Asynchronous in nature",
    "contributor": "Sneh Verma"
  },
  {
    "queId": "91",
    "courseName": "Managing React State",
    "question": "Which is not the remote state library?",
    "optOne": "SWR",
    "optTwo": "Recoil",
    "optThree": "Relay",
    "optFour": "Apollo",
    "answer": "Recoil",
    "contributor": "Minal Bitne"
  },
  {
    "queId": "92",
    "courseName": "Managing React State",
    "question": "How many ways are there to handle API calls in React?",
    "optOne": "5",
    "optTwo": "4",
    "optThree": "3",
    "optFour": "2",
    "answer": "4",
    "contributor": "Minal Bitne"
  },
  {
    "queId": "93",
    "courseName": "React State: Redux & Context",
    "question": "When did React team introduced React Hooks?",
    "optOne": "2018",
    "optTwo": "2019",
    "optThree": "2017",
    "optFour": "2015",
    "answer": "2018",
    "contributor": "Minal Bitne"
  },
  {
    "queId": "94",
    "courseName": "React State: Redux & Context",
    "question": "State True or False Props are used to manage data",
    "optOne": "TRUE",
    "optTwo": "FALSE",
    "answer": "FALSE",
    "contributor": "Minal Bitne"
  },
  {
    "queId": "95",
    "courseName": "Optimize Performance for React",
    "question": "Which React component is used for performance optimization? ",
    "optOne": "Functional Component",
    "optTwo": "Class Component",
    "optThree": "Pure Component",
    "optFour": "Higher-Order Component",
    "answer": "Pure Component",
    "contributor": "Minal Bitne"
  },
  {
    "queId": "96",
    "courseName": "Optimize Performance for React",
    "question": "Which React hook is used for caching expensive operation Results? ",
    "optOne": "useContext",
    "optTwo": "useMemo",
    "optThree": "useCallback",
    "optFour": "useRef",
    "answer": "useMemo",
    "contributor": "Minal Bitne"
  },
  {
    "queId": "97",
    "courseName": "React State: Redux & Context",
    "question": "Redux solves this problem by managing application’s state with a single global object called ?",
    "optOne": "directory",
    "optTwo": "file",
    "optThree": "store",
    "optFour": "reducer",
    "answer": "store",
    "contributor": "Sneh Verma"
  },
  {
    "queId": "98",
    "courseName": "React State: Redux & Context",
    "question": "Which of the following API is a MUST for every ReactJS component?",
    "optOne": "getInitialState",
    "optTwo": "render",
    "optThree": "renderComponent",
    "optFour": "None of these",
    "answer": "renderComponent",
    "contributor": "Sneh Verma"
  },
  {
    "queId": "99",
    "courseName": "Optimize Performance for React",
    "question": "ReactJS uses _____ to increase performance.",
    "optOne": "Original DOM",
    "optTwo": "Virtual DOM",
    "optThree": "Both",
    "optFour": "None of these",
    "answer": "Virtual DOM",
    "contributor": "Sneh Verma"
  },
  {
    "queId": "100",
    "courseName": "Optimize Performance for React",
    "question": "Which method in a React Component should you override to stop the component from updating?",
    "optOne": "willComponentUpdate",
    "optTwo": "shouldComponentUpdate",
    "optThree": "componentDidUpdate",
    "optFour": "componentDidMount",
    "answer": "shouldComponentUpdate",
    "contributor": "Sneh Verma"
  },
  {
    "queId": "101",
    "courseName": "Using React Hooks",
    "question": "Correct way for declaring a react usestate is ",
    "optOne": "const[count,Count]=useState(int)",
    "optTwo": "let[count,Count]=useState(int)",
    "optThree": "const[count,setCount]=useState(0)",
    "answer": "const[count,setCount]=useState(0)",
    "contributor": "Nivedha"
  },
  {
    "queId": "102",
    "courseName": "Using React Hooks",
    "question": "When working with usestate Hooks, what is the first parameter passed",
    "optOne": "initial value",
    "optTwo": "no parameters are there",
    "optThree": "a lambda function to set the value",
    "optFour": "a Timeout function",
    "answer": "initial value",
    "contributor": "Shivendra Singh"
  },
  {
    "queId": "103",
    "courseName": "Using React Hooks",
    "question": "What does useState return?",
    "optOne": "state",
    "optTwo": "variable with the current state value",
    "optThree": "variables",
    "optFour": "functions",
    "answer": "variable with the current state value",
    "contributor": "Sanjana Suresh Shetty"
  },
  {
    "queId": "104",
    "courseName": "Using React Hooks"
  },
  {
    "queId": "105"
  },
  {
    "queId": "106",
    "courseName": "Using React Hooks",
    "question": "Will React hooks work inside class components?",
    "optOne": "Yes",
    "optTwo": "No",
    "answer": "No",
    "contributor": "Thilak Naik"
  },
  {
    "queId": "107",
    "courseName": "Using React Hooks",
    "question": "State true or false. Conditional hooks are not possible in React implementation of Hooks. ",
    "optOne": "TRUE",
    "optTwo": "FALSE",
    "answer": "TRUE",
    "contributor": "Shreeraksha"
  },
  {
    "queId": "108"
  },
  {
    "queId": "109",
    "courseName": "React State: Redux & Context & Hooks",
    "question": "_____ allows you to reuse stateful logic without changing your component hierarchy.",
    "optOne": "States",
    "optTwo": "Props",
    "optThree": "Hooks",
    "optFour": "Context",
    "answer": "Hooks",
    "contributor": "Aishwarya Bhanage"
  },
  {
    "queId": "110",
    "courseName": "React State: Redux & Context & Hooks",
    "question": "Context API has ____ tooling than Redux.",
    "optOne": "Less",
    "optTwo": "More",
    "optThree": "Same",
    "optFour": "Different",
    "answer": "Less",
    "contributor": "Aishwarya Bhanage"
  },
  {
    "queId": "111",
    "courseName": "Using React Hooks",
    "question": "What is useRef?",
    "optOne": "componentDidMount()",
    "optTwo": "return",
    "optThree": "props",
    "optFour": "constructors",
    "answer": "componentDidMount()",
    "contributor": "Sanjana Suresh Shetty"
  },
  {
    "queId": "112",
    "courseName": "Using React Hoooks",
    "question": "How does useCallback prevent re-rendering of a component?",
    "optOne": "by forcing the component to not re-render",
    "optTwo": "it cannot prevent to re-render a component",
    "optThree": "by creating a memoized version of the component",
    "optFour": "by creating a copy of component",
    "answer": "by creating a memoized version of the component",
    "contributor": "Shivendra Singh"
  },
  {
    "queId": "113",
    "courseName": "React State: Redux & Context & Hooks",
    "question": "What function can be used to change the state of a React component",
    "optOne": "this.setState",
    "optTwo": "this.changeState",
    "optThree": "this.State = {}",
    "answer": "this.setState",
    "contributor": "Aryann Pravin More"
  },
  {
    "queId": "114",
    "courseName": "React State: Redux & Context & Hooks",
    "question": "You find that all react components must act like pure functions concerning their props. How is it possible for you to get components to change their output over time in response to user actions and network responses without violating this rule?",
    "optOne": "Using Compostion",
    "optTwo": " Using Context",
    "optThree": "Using State",
    "optFour": "Using Callback",
    "answer": "using state",
    "contributor": "Aryann Pravin More"
  },
  {
    "queId": "115",
    "courseName": "React State: Redux & Context & Hooks",
    "question": " When it is recommended to pass this.setState as a function instead of an object?",
    "optOne": "When the new state should completely replace the old state",
    "optTwo": "When the new state depends on the old state",
    "optThree": "When the new state does not depend on the old state",
    "answer": "When the new state depends on the old state",
    "contributor": "Aryann Pravin More"
  },
  {
    "queId": "116",
    "courseName": "Using React Hooks",
    "question": "State true or false. useEffect runs both after the first render and after every update. ",
    "optOne": "TRUE",
    "optTwo": "FALSE",
    "answer": "TRUE",
    "contributor": "Thilak Naik"
  },
  {
    "queId": "117",
    "courseName": "Managing React State",
    "question": "What is the use of refs?",
    "optOne": "managing uncontrolled components",
    "optTwo": "managing controlled components",
    "optThree": "store values that are displayed",
    "answer": "managing uncontrolled components",
    "contributor": "Sanjana Suresh Shetty"
  },
  {
    "queId": "118",
    "courseName": "Managing React State",
    "question": "Refs are used for managing uncontrolled components. True or False?",
    "optOne": "TRUE",
    "optTwo": "FALSE",
    "answer": "TRUE",
    "contributor": "Thilak Naik"
  },
  {
    "queId": "119",
    "courseName": "Managing React State"
  },
  {
    "queId": "120"
  },
  {
    "queId": "121",
    "courseName": "Using React Hooks",
    "question": "What is hooked  to a reducer function to access the store to manage the state",
    "optOne": "UseReducer",
    "optTwo": "UseState",
    "optThree": "UseContext",
    "optFour": "UseMemo",
    "answer": "UseReducer",
    "contributor": "Veena Narayan"
  },
  {
    "queId": "122",
    "courseName": "Using React Hooks",
    "question": "What is the default return value for a typical reducer function that you would associate with useReducer.",
    "optOne": "Hooks",
    "optTwo": "State",
    "optThree": "Props",
    "answer": "State",
    "contributor": "Veena Narayan"
  },
  {
    "queId": "123",
    "courseName": "Managing react State",
    "question": "React's synthetic event system helps improve performance by strategically binding event handler.",
    "optOne": "TRUE",
    "optTwo": "FALSE",
    "answer": "TRUE",
    "contributor": "Veena Narayan"
  },
  {
    "queId": "124",
    "courseName": "Managing react State",
    "question": "Error boundary declares some basic state for tracking whether an error has occurred or not.",
    "optOne": "TRUE",
    "optTwo": "FALSE",
    "answer": "TRUE",
    "contributor": "Veena Narayan"
  },
  {
    "queId": "125",
    "courseName": "Using React Hooks",
    "question": "In useEffect(first_parameter,second_parameter)first_parameter -> call back function , second_parameter -> dependency array i.e, Null,empty array or values",
    "optOne": "TRUE",
    "optTwo": "FALSE",
    "answer": "TRUE",
    "contributor": "spurthi.eshwarappa"
  },
  {
    "queId": "126",
    "courseName": "Using React Hooks",
    "question": "what makes react hooks great? a. composition instead of inheritence  b. best parts of mixins  c. Replace prop drilling,render props, HOCs",
    "optOne": "both a and c",
    "optTwo": "both a and b",
    "optThree": "only a",
    "optFour": "All a,b,c are correct",
    "answer": "All a,b,c are correct",
    "contributor": "spurthi.eshwarappa"
  },
  {
    "queId": "127",
    "courseName": "Optimize Performance for React",
    "question": "When you add react developer tools extension which two new tabs get added in your Chrome DevTools ?",
    "optOne": "Components & Performance ",
    "optTwo": "Profiler & Memory",
    "optThree": "Components & Profiler",
    "optFour": "Performance & Memory",
    "answer": " Components & Profiler",
    "contributor": "Aishwarya Bhanage"
  },
  {
    "queId": "128",
    "courseName": "Managing react State",
    "question": "Which of the following are arguments of useReducer?  A-reducer, B-initial state, C-function to load initial state lazily",
    "optOne": "A,B",
    "optTwo": "A,C",
    "optThree": "B,C",
    "optFour": "A,B,C",
    "answer": "A,B,C",
    "contributor": "Shivendra Singh"
  },
  {
    "queId": "129",
    "courseName": "Managing React State",
    "question": "What does Javascript map function return?",
    "optOne": "returns an array for each function",
    "optTwo": "variables",
    "optThree": "objects",
    "optFour": "functions",
    "contributor": "Sanjana Suresh Shetty"
  },
  {
    "queId": "130"
  },
  {
    "queId": "131",
    "courseName": "Managing React State",
    "question": "Immutable value and objects can be changed. True or False?",
    "optOne": "TRUE",
    "optTwo": "FALSE",
    "answer": "FALSE",
    "contributor": "Thilak Naik"
  },
  {
    "queId": "132",
    "courseName": "optimize performance for react",
    "question": "what is the method used to add an event listener?",
    "optOne": "addEventListener()",
    "optTwo": "addListener()",
    "optThree": "addEvent(Listener)",
    "optFour": "addListener(Event)",
    "answer": "addEventListener()",
    "contributor": "shruti reddy"
  },
  {
    "queId": "133",
    "courseName": "optimize performance for react",
    "question": "what is the purpose of lazy loading?",
    "optOne": "immediate loading is necessary",
    "optTwo": "loading under command",
    "optThree": "immediate loading is not necessary",
    "optFour": "loading after a definite interval",
    "answer": "immediate loading is not necessary",
    "contributor": "shruti reddy"
  },
  {
    "queId": "134",
    "courseName": "Managing React State",
    "question": "The second argument(dependency array) in useEffect hook is optional.",
    "optOne": "TRUE",
    "optTwo": "FALSE",
    "answer": "TRUE",
    "contributor": "Shivendra SIngh"
  },
  {
    "queId": "135"
  },
  {
    "queId": "136",
    "courseName": "Managing React State",
    "question": "Principle of Least Privilege states that \" Every module must be able to access only the information and resources that are necessary for its legitimate purpose\".",
    "optOne": "TRUE",
    "optTwo": "FALSE",
    "answer": "TRUE",
    "contributor": "spurthi.eshwarappa"
  },
  {
    "queId": "137",
    "courseName": "Managing React State",
    "question": "\"Given below are Ways to Handle State in React Apps\"  1. Local state 2. Lifted state 3. Derived state 4. Refs  5. Context. \"Match the correct option of when to use it\"  a.Only one component needs the state  b.A few related components need the state c.State can be derived from existing state d.DOM reference, state that isn’t rendered e.Global or subtree state",
    "optOne": "1-a,2-b,3-c,4-d,5-e",
    "optTwo": "1-e,2-b,3-c,4-d,5-a",
    "optThree": "1-e,2-c,3-b,4-d,5-a",
    "optFour": "None of the above",
    "answer": "1-a,2-b,3-c,4-d,5-e",
    "contributor": "spurthi.eshwarappa"
  },
  {
    "queId": "138",
    "courseName": "Redux and Context",
    "question": "What does JSX render?",
    "optOne": "renders HTML in reactor components",
    "optTwo": "renders javascript",
    "optThree": "functions",
    "optFour": "XML components",
    "answer": "renders HTML in reactor components",
    "contributor": "Sanjana Suresh Shetty"
  },
  {
    "queId": "139",
    "courseName": "Using React Hooks",
    "question": "what has the ability to pass data,config data down the component tree without prop drilling",
    "optOne": "useMemo",
    "optTwo": "useContext",
    "optThree": "useReducer",
    "answer": "useContext",
    "contributor": "nivedha.selvakannan"
  },
  {
    "queId": "140",
    "courseName": "Using React Hooks",
    "question": "The ______ is a function that takes in a previous state as 1st param, an action as a 2nd param and returns a new state",
    "optOne": "action",
    "optTwo": "reducer",
    "optThree": "state",
    "answer": "reducer",
    "contributor": "nivedha selvakannan"
  },
  {
    "queId": "141",
    "courseName": "Redux and Context",
    "question": "What is JSX?",
    "optOne": "Java XML",
    "optTwo": "Javascript XML",
    "optThree": "Javascript state XML",
    "answer": "javascript XML",
    "contributor": "Sanjana Suresh Shetty"
  },
  {
    "queId": "142",
    "courseName": "Using React Hooks",
    "question": "if dependency array is _________,the useEffect is only called once when the component is first mounted",
    "optOne": "Initial data",
    "optTwo": "empty",
    "optThree": "depends on a state value",
    "answer": "empty",
    "contributor": "nivedha selvakannan"
  },
  {
    "queId": "143",
    "courseName": "optimize performance for react",
    "question": "The value of useMemo can be managed by  passing it the correct dependencies. True or false?",
    "optOne": "TRUE",
    "optTwo": "FALSE",
    "answer": "TRUE",
    "contributor": "Sripriya Perumandla"
  },
  {
    "queId": "144",
    "courseName": "Optimize Performance for React",
    "question": "Use _______ for code-splitting so that components download on demand.",
    "optOne": "Lazy",
    "optTwo": "Suspense",
    "optThree": "useMemo",
    "optFour": "Fallback",
    "answer": "Suspense",
    "contributor": "Aishwarya Bhanage"
  },
  {
    "queId": "145"
  },
  {
    "queId": "146",
    "courseName": "React State: Redux & Context & Hooks",
    "question": "In Redux which of the following make the STORE available?",
    "optOne": "Component",
    "optTwo": "Container",
    "optThree": "Action",
    "optFour": "Provider",
    "answer": "Provider",
    "contributor": "Shivendra Singh"
  },
  {
    "queId": "147",
    "courseName": "Managing React State ",
    "question": "what is the scope of a lifted state in react hooks?",
    "optOne": "only inside the component",
    "optTwo": "anywhere outside the component",
    "optThree": "A few related component that needs the state",
    "answer": "A few related component that needs the state",
    "contributor": "nivedha selvakannan"
  },
  {
    "queId": "148",
    "courseName": "optimize  performance for react ",
    "question": "A pure component is a component that only re-renders if props/state is different from previous props/state.True or False.",
    "optOne": "TRUE",
    "optTwo": "FALSE",
    "answer": "TRUE",
    "contributor": "Sripriya Perumandla"
  },
  {
    "queId": "149"
  },
  {
    "queId": "150",
    "courseName": "React State:Redux and context",
    "question": "J S X is just an easy way to render HTML in our reactor components and stands for Java or JavaScript XML.",
    "optOne": "TRUE",
    "optTwo": "FALSE",
    "answer": "TRUE",
    "contributor": "Veena Narayan"
  },
  {
    "queId": "151",
    "courseName": "React State: Redux and Context",
    "question": "props are states that is passed through a parent component and then used in a child component.",
    "optOne": "TRUE",
    "optTwo": "FALSE",
    "answer": "TRUE",
    "contributor": "Veena Narayan"
  },
  {
    "queId": "152",
    "courseName": "React State:Redux and context",
    "question": "What is true about redux?",
    "optOne": "a)Redux can be thought of as a central store that holds an entire applications state.",
    "optTwo": "b)Each of the app components can access the stored state without requiring passing data or functions from one component to another.",
    "optThree": "Both a and b",
    "optFour": "None ",
    "answer": "Both a and b",
    "contributor": "spurthi.eshwarappa"
  },
  {
    "queId": "153",
    "courseName": "React State:Redux and context",
    "question": "Redux DevTools is a live-editing time travel environment for redux with hot reloading, action replay, and customizable UI",
    "optOne": "TRUE",
    "optTwo": "FALSE",
    "answer": "TRUE",
    "contributor": "spurthi.eshwarappa"
  },
  {
    "queId": "154"
  },
  {
    "queId": "155",
    "courseName": "Using React Hooks",
    "question": "Which of the following is not a react hook?",
    "optOne": "useCallback",
    "optTwo": "UseReducer",
    "optThree": "useLayoutEffect",
    "optFour": "useDebug",
    "Option5": "none of the above",
    "answer": "useDebug",
    "contributor": "Sravya Khandavilli"
  },
  {
    "queId": "156",
    "courseName": "React State:Redux and Context",
    "question": "Which of the following are components of REDUX? A-Action, B-Reducer, C-Store, D-View",
    "optOne": "A,C,D",
    "optTwo": "A,B,C",
    "optThree": "A & D",
    "optFour": "A,B,C,D",
    "answer": "A,B,C,D",
    "contributor": "Shivendra Singh"
  },
  {
    "queId": "157",
    "courseName": "Using React Hooks",
    "question": "React hooks work inside both class and functional components",
    "optOne": "TRUE",
    "optTwo": "FALSE",
    "answer": "FALSE",
    "contributor": "Sravya Khandavilli"
  },
  {
    "queId": "158",
    "courseName": "managing react state`",
    "question": "state true or false . can we nest hooks call inside the function",
    "optOne": "TRUE",
    "optTwo": "FALSE",
    "answer": "FALSE",
    "contributor": "tukaram todkari "
  },
  {
    "queId": "159",
    "courseName": "using react hooks",
    "question": "When should we use a Reducer Hook instead of a State Hook?",
    "optOne": "Reducer Hooks should be used when complex state changes are needed. Usually, this is the case for global state",
    "optTwo": "When setter functions of multiple State Hooks are called together, this is a good indicator for using a Reducer Hook instead",
    "optThree": "both a and b",
    "optFour": "none of the above",
    "answer": "both a and b",
    "contributor": "tukaram todkari"
  },
  {
    "queId": "160",
    "courseName": "Performance Optimization",
    "question": "Which DOM allows React to go and see what the effect on the DOM would be and to compare with that instead of comparing with the real DOM?",
    "optOne": "Virtual DOM",
    "optTwo": "Shadow DOM",
    "optThree": "Actual DOM",
    "answer": "Virtual DOM",
    "contributor": "Veena Narayan"
  },
  {
    "queId": "161",
    "courseName": "Performance Optimization",
    "question": "React asks components for their latest markup and it pushes that markup into the which DOM.",
    "optOne": "Browser DOM",
    "optTwo": "Virtual DOM",
    "optThree": "Shadow DOM",
    "optFour": "none of the above",
    "answer": "Broswer DOM",
    "contributor": "Veena Narayan"
  },
  {
    "queId": "162",
    "courseName": "Performance Optimization",
    "question": "What is PureComponent?",
    "optOne": "it does not re render when the value of props has changed",
    "optTwo": "it re-renders",
    "contributor": "Sanjana Suresh Shetty"
  },
  {
    "queId": "163",
    "courseName": "React State:Redux and context",
    "question": "What can retrieve updated state and re-render again?",
    "optOne": "State",
    "optTwo": "Store",
    "optThree": "View",
    "optFour": "Action",
    "answer": "View",
    "contributor": "Sripriya Perumandla"
  },
  {
    "queId": "164",
    "courseName": "React performance optimization",
    "question": "React is a front end__________?",
    "optOne": "framework",
    "optTwo": "library",
    "optThree": "both a and b",
    "optFour": "neither a nor b",
    "answer": "library",
    "contributor": "NivedhaSelvakannan"
  },
  {
    "queId": "165",
    "courseName": "Performance Optimization",
    "question": "What is useCallback?",
    "optOne": "returns memoized version of callback",
    "optTwo": "returns when input value has not changed",
    "contributor": "Sanjana Suresh Shetty"
  },
  {
    "queId": "166",
    "courseName": "React State:Redux and context",
    "question": "A store is an _____________ object tree in Redux.\r\n\r\n",
    "optOne": "Immutable",
    "optTwo": "Mutable",
    "optThree": "Both a and b",
    "optFour": "None of the above",
    "answer": "Immutable",
    "contributor": "Sripriya Perumandla"
  },
  {
    "queId": "167",
    "courseName": "managing react state",
    "question": "react apps allow the users to:",
    "optOne": "create data",
    "optTwo": "remove data",
    "optThree": "create and remove data",
    "optFour": "create, remove and change data",
    "answer": "create, remove and change data",
    "contributor": "Susriya Rampalli"
  },
  {
    "queId": "168",
    "courseName": "Using React Hooks",
    "question": "Which side effects are performed by useEffect hook?",
    "optOne": "updating the DOM",
    "optTwo": "Fetching and consuming data from a server API",
    "optThree": "setting up a subscription",
    "optFour": "All of the above",
    "answer": "All of the above",
    "contributor": "Yash Chauhan"
  },
  {
    "queId": "169",
    "courseName": "Performance Optimization",
    "question": "____ enables you to specify the loading indicator in the event that the components in the tree below it are not yet ready to render",
    "optOne": "React.lazy()",
    "optTwo": "React.Suspense",
    "optThree": "React.memo()",
    "optFour": "None of the above",
    "answer": "React.Suspense",
    "contributor": "Spurthi Eshwarappa"
  },
  {
    "queId": "170",
    "courseName": "Performance Optimization",
    "question": "_______ is a function that enables you to render a dynamic import as a regular component",
    "optOne": "React.lazy()",
    "optTwo": "React.Suspense",
    "optThree": "React.memo()",
    "optFour": "None of the above",
    "answer": "React.lazy()",
    "contributor": "Spurthi Eshwarappa"
  },
  {
    "queId": "171",
    "courseName": "Managing react state",
    "question": "Which of the following can be used in place of promises to handle API responses",
    "optOne": "async",
    "optTwo": "await",
    "optThree": "Both A and B",
    "optFour": "None of the above",
    "answer": "Both A and B",
    "contributor": "Sravya Khandavilli"
  },
  {
    "queId": "172",
    "courseName": "Managing react state",
    "question": "________ is an open source library which can be used to achieve immutabiity",
    "optOne": "Immer",
    "optTwo": "Rebass",
    "optThree": "Grommet",
    "optFour": "None of the above",
    "answer": "Immer",
    "contributor": "Sravya Khandavilli"
  },
  {
    "queId": "173",
    "courseName": "React State: Redux and context and Hooks",
    "question": "The ________ notifies the view by executing their callback functions",
    "optOne": "state",
    "optTwo": "store",
    "optThree": "reducer",
    "optFour": "action",
    "answer": "store",
    "contributor": "shruti reddy"
  },
  {
    "queId": "174",
    "courseName": "React State: Redux and context and Hooks",
    "question": "Both props and state are plain javascript objects",
    "optOne": "TRUE",
    "optTwo": "FALSE",
    "answer": "TRUE",
    "contributor": "shruti reddy"
  },
  {
    "queId": "175",
    "courseName": "Managing React State",
    "question": "Which of the following are mutable?",
    "optOne": "primitives",
    "optTwo": "collections",
    "optThree": "states",
    "optFour": "None of the above",
    "answer": "collections",
    "contributor": "Yash Joshi"
  },
  {
    "queId": "176",
    "courseName": "Managing React State",
    "question": "Hooks must start with which word?",
    "optOne": "use",
    "optTwo": "hooks",
    "optThree": "react",
    "optFour": "class",
    "answer": "use",
    "contributor": "Yash Joshi"
  },
  {
    "queId": "177",
    "courseName": "Optimize Performance for react",
    "question": "What is the biggest benefit of using react's virtual DOM approach?",
    "optOne": "React can run on the server, without a browser",
    "optTwo": "React can be compatible with more browsers",
    "optThree": "React does not need to do expensive DOM operations on every render",
    "optFour": "React renders on a Canvas element which makes it faster",
    "answer": "React does not need to do expensive DOM operations on every render",
    "contributor": "Shivendra Singh"
  },
  {
    "queId": "178",
    "courseName": "Optimize Performance for React",
    "question": "What React hook can you use to ensure that a handler function only gets recreated when it should?",
    "optOne": "useSingleton",
    "optTwo": "useReducer",
    "optThree": "useCallback",
    "optFour": "UseMemo",
    "answer": "useCallback",
    "contributor": "Shivendra Singh"
  },
  {
    "queId": "179",
    "courseName": "React State: Redux and context and Hooks",
    "question": "Reducers are a pure function in Redux. True or False",
    "optOne": "TRUE",
    "optTwo": "FALSE",
    "optThree": "Can be true or false",
    "optFour": "Can not say",
    "answer": "TRUE",
    "contributor": "Varun HH"
  },
  {
    "queId": "180",
    "courseName": "React State: Redux and context and Hooks",
    "question": "Redux follows the ____________ data flow.",
    "optOne": "unidirectional",
    "optTwo": "bidirectional",
    "optThree": "Both A and B",
    "optFour": "None",
    "answer": "unidirectional",
    "contributor": "Varun HH"
  },
  {
    "queId": "181",
    "courseName": "Using React hooks",
    "question": "what are the two ways that data gets handled in react",
    "optOne": "state and props",
    "optTwo": "services and components",
    "optThree": "none of the above",
    "answer": "state and props",
    "contributor": "shruti reddy"
  },
  {
    "queId": "182",
    "courseName": "Using React hooks",
    "question": "For what webpack command is used?",
    "optOne": "transpiles all javascript into one file",
    "optTwo": "runs react development server",
    "optThree": "A module bundler",
    "answer": "A module bundler",
    "contributor": "shruti reddy"
  },
  {
    "queId": "183",
    "courseName": "Using React Hooks",
    "question": "Local State Hooks for input field should be defined in the component where they are used. State True or False?",
    "optOne": "TRUE",
    "optTwo": "FALSE",
    "answer": "TRUE",
    "contributor": "Amey Jeurkar"
  },
  {
    "queId": "184",
    "courseName": "Using React Hooks",
    "question": "Global state is state that is used across multiple components throughout the whole appllication. State True or False?",
    "optOne": "TRUE",
    "optTwo": "FALSE",
    "answer": "TRUE",
    "contributor": "Amey Jeurkar"
  },
  {
    "queId": "185",
    "courseName": "Using React Hooks",
    "question": "What is equivalent of useEffect hooks in class component?",
    "optOne": "ComponentDidMount()",
    "optTwo": "ComponentDIdUpdate()",
    "optThree": "ComponentWillUnmount()",
    "optFour": "shouldComponentUpdate()",
    "answer": "Option 1 & option 2",
    "contributor": "Amey Jeurkar"
  },
  {
    "queId": "186",
    "courseName": "Usig React Hooks",
    "question": "which react hook prevents unnecessary re-rendering of a component?",
    "optOne": "useEffect",
    "optTwo": "useContext",
    "optThree": "React.memo",
    "optFour": "useState",
    "answer": "React.memo",
    "contributor": "Amey Jeurkar"
  },
  {
    "queId": "187",
    "courseName": "Managing React state",
    "question": "which act as input of class-based component?",
    "optOne": "class and factory",
    "optTwo": "render and mount",
    "optThree": "props",
    "answer": "props",
    "contributor": "shruti reddy"
  },
  {
    "queId": "188",
    "courseName": "Managing React state",
    "question": "ReactJS covers ______",
    "optOne": "user Interface layer in an application",
    "optTwo": "Data layer in an application",
    "optThree": "both a &b",
    "optFour": "none of the above",
    "answer": "user interface layer in an application",
    "contributor": "shruti reddy"
  },
  {
    "queId": "189",
    "courseName": "Using React Hooks",
    "question": "Stmt.1 : React hooks are clear,composable and declarative way ,Stmt.2 : React Hooks makes developing apps easier and with less complexity",
    "optOne": "Stmt.1 is true",
    "optTwo": "Stmt.2 is true",
    "optThree": "Both Stmt.1 and Stmt.2 are true",
    "optFour": "Both Stmt.1 and Stmt.2 are false",
    "contributor": "Varun HH"
  },
  {
    "queId": "190",
    "courseName": "Using React Hooks",
    "question": "______________ primarily used to allow access directly to an element in the DOM.",
    "optOne": "useRef()",
    "optTwo": "useEffect()",
    "optThree": "useState()",
    "optFour": "None",
    "answer": "useRef()",
    "contributor": "Varun HH"
  },
  {
    "queId": "191",
    "courseName": "Managing React state",
    "question": "What’s a Pure Function?",
    "optTwo": "Depends only on arguments"
  },
  {
    "queId": "192",
    "courseName": "Managing React state",
    "question": "Four Ways To Handle HTTP Calls are Library, Centralized functions, Custom hook, Inline",
    "optOne": "TRUE",
    "optTwo": "FALSE",
    "answer": "TRUE",
    "contributor": "Varun HH"
  },
  {
    "queId": "193",
    "courseName": "Performance Optimization",
    "question": "Which method is not part of ReactDOM?",
    "optOne": "ReactDOM.destroy()",
    "optTwo": "ReactDOM.hydrate()",
    "optThree": "ReactDOM.createPortal()",
    "optFour": "ReactDOM.findDOMNode()",
    "answer": "ReactDOM.destroy()",
    "contributor": "Shambhavi Kumar"
  },
  {
    "queId": "194",
    "courseName": "Performance Optimization"
  },
  {
    "queId": "195",
    "courseName": "Using React Hooks",
    "question": "   What is the first parameter of React hook useEfect?  ",
    "optOne": "A function that is executed based on the array passed as first parameter",
    "optTwo": "A function that is executed based on the array passed as second parameter",
    "optThree": "A variable that is executed based on the array passed as second parameter",
    "optFour": "A variable that is executed based on the array passed as first parameter",
    "answer": "A function that is executed based on the array passed as second parameter",
    "contributor": "Nabarun Kumar"
  },
  {
    "queId": "196",
    "courseName": "Using React Hooks",
    "question": "We can just have one useState command and pass a JavaScript object with lots of attributes.",
    "optOne": "TRUE",
    "optTwo": "FALSE",
    "answer": "TRUE",
    "contributor": "Nabarun Kumar"
  },
  {
    "queId": "197",
    "courseName": "Using React Hooks",
    "question": "What is the default return value for a typical reducer function that woud bbe associated with useReducer",
    "optOne": "state",
    "optTwo": "variables",
    "optThree": "functions",
    "optFour": "none of the above",
    "answer": "state",
    "contributor": "Abhay Bajaj"
  },
  {
    "queId": "198",
    "courseName": "Using React Hooks",
    "question": "Which are the three common/basic React hooks?",
    "optOne": "useState, useRef,useEffect",
    "optTwo": "useContext, useRef,useEffect",
    "optThree": "both a &b",
    "optFour": "none of the above",
    "answer": "useState,useRef,useEffect",
    "contributor": "Abhay Bajajs"
  },
  {
    "queId": "199",
    "courseName": "React State: Redux and context and Hooks",
    "question": "props are ______ used for keeping track on data",
    "optOne": "object",
    "optTwo": "class",
    "optThree": "components",
    "optFour": "none of the above",
    "answer": "objects",
    "contributor": "Susriya Rampalli"
  },
  {
    "queId": "200",
    "courseName": "React State: Redux and context and Hooks",
    "question": "props are passed through ______ component and used in a ______ component",
    "optOne": "child, parent",
    "optTwo": "parent, child",
    "optThree": "main, child",
    "optFour": "none of the above",
    "answer": "parent, child",
    "contributor": "Susriya Rampalli"
  },
  {
    "queId": "203",
    "courseName": "Managing React State",
    "question": "Which JavaScript's  function runs a function for each element in the array and returns a new array?",
    "optOne": "map()",
    "optTwo": "reduce()",
    "optThree": "Both",
    "optFour": "None",
    "answer": "map()",
    "contributor": "Nabarun Kumar"
  },
  {
    "queId": "204",
    "courseName": "Managing React State",
    "question": "The app component contains the app's layout, and it calls which of the following components?",
    "optOne": "header",
    "optTwo": "footer",
    "optThree": "Both",
    "optFour": "None",
    "answer": "Both",
    "contributor": "Nabarun Kumar"
  },
  {
    "queId": "205",
    "courseName": "React State: Redux & Context",
    "question": "Which of the components are cleaner, clearer, and easier to use? ",
    "optOne": "functional components",
    "optTwo": "class components",
    "optThree": "container components",
    "optFour": "Higher-order components",
    "answer": "Functional Components",
    "contributor": "Nabarun Kumar"
  },
  {
    "queId": "206",
    "courseName": "React State: Redux & Context",
    "question": " State machines are all about having like a finite possible amount of states, and an explicit finite amount of states and transitions.",
    "optOne": "TRUE",
    "optTwo": "FALSE",
    "answer": "TRUE",
    "contributor": "Nabarun Kumar"
  },
  {
    "queId": "207",
    "courseName": "Performance Optimization",
    "question": "When you have a functional component, which of the following can be used to provide function for comparision of the props.",
    "optOne": "react.memo()",
    "optTwo": "react.suspense",
    "optThree": "react.lazy()",
    "optFour": "None of the above",
    "answer": "react.memo()",
    "contributor": "Nabarun Kumar"
  },
  {
    "queId": "208",
    "courseName": "Performance Optimization",
    "question": "useCallback Hook can be used to generate a function that only changes when you pass different things similar to the useEffect Hook.",
    "optOne": "TRUE",
    "optTwo": "FALSE",
    "answer": "TRUE",
    "contributor": "Nabarun Kumar"
  },
  {
    "queId": "209",
    "courseName": "Managing React State",
    "question": "What are the benefits of  Xstate",
    "optOne": "Provides State chart ",
    "optTwo": "Enforce State transitions",
    "optThree": "protects from invalid transitions",
    "optFour": "All  the above",
    "answer": "All the above",
    "contributor": "Shashank HH"
  },
  {
    "queId": "210",
    "courseName": "Managing React State",
    "question": "Which one of  the following is third party server state is used to fetch data from server",
    "optOne": "React-query",
    "optTwo": "Fetch",
    "optThree": "axios",
    "optFour": "None",
    "answer": "React-query",
    "contributor": "Shashank HH"
  },
  {
    "queId": "211",
    "courseName": "Optimize Performance for React",
    "question": "The AddModel component uses the react‑model NPM package to launch a model for adding a card to the board",
    "optOne": "TRUE",
    "optTwo": "FALSE",
    "answer": "TRUE",
    "contributor": "Susriya Rampalli"
  },
  {
    "queId": "212"
  },
  {
    "queId": "213",
    "courseName": "using React Hooks",
    "question": "Props are ______ into other components.",
    "optOne": "injected",
    "optTwo": "method",
    "optThree": "both 1 and 2",
    "answer": "method",
    "contributor": "Shambhavi Kumar"
  },
  {
    "queId": "214",
    "courseName": "using React Hooks",
    "question": "In react what is used to pass data to a computer from outside?",
    "optOne": "setState",
    "optTwo": "props",
    "optThree": "Prop Types",
    "optFour": "render with arguments",
    "answer": "props",
    "contributor": "Shambhavi Kumar"
  },
  {
    "queId": "215",
    "courseName": "Managing React State",
    "question": "Which of the following statements are true:  1. contolled components are used when there is a need for extreme performance.  2. Pure function does'nt mutate arguments.",
    "optOne": "only 1",
    "optTwo": "only 2",
    "optThree": "both 1 and 2",
    "optFour": "neither 1 or 2",
    "answer": "both 1 and 2",
    "contributor": "Sharvya P N"
  },
  {
    "queId": "216",
    "courseName": "Managing React State",
    "question": "which one of the four ways to handle API calls simplifies state management and eliminate redundant code?",
    "optOne": "Inline",
    "optTwo": "Centralized functions",
    "optThree": "Custom hook",
    "optFour": "Library",
    "answer": "Custom hook",
    "contributor": "Shravya P N"
  },
  {
    "queId": "217",
    "courseName": "Optimize Performance for React",
    "question": "Which of the following is used to optimize react app\r\n\r\n1 avoid wasted rendering\r\n2 increase the size of app\r\n3 load components on demand\r\n4 cache all operation results",
    "optOne": "3 & 4 only",
    "optTwo": "1 & 3 only",
    "optThree": "1, 3 & 4",
    "optFour": "all of the above",
    "answer": "1 & 3 only",
    "contributor": "Shreya Bakshi"
  },
  {
    "queId": "218",
    "courseName": "Optimize Performance for React",
    "question": "what steps to be taken to ensure that a functional component should render when required?",
    "optOne": "Refactor the component to a class component and use PureComponent",
    "optTwo": "Ensure that the parent component conditionally renders this component",
    "optThree": "Wrap the component defination using React.memo",
    "optFour": "Use the useMemo hook to ensure that anything expensive is cached",
    "answer": "Wrap the component defination using React.memo",
    "contributor": "Shreya Bakshi"
  },
  {
    "queId": "219",
    "courseName": "Using React Hooks",
    "question": "What is a characteristic of a pure functional component",
    "optOne": "All the code in a pure component must be derived from native Javascript classes",
    "optTwo": "Every variable must be declared with an intializer",
    "optThree": "A pure functional component can call no other components besides itself",
    "optFour": "A pure functional component guarentees that the return will be the same when passed in parameters that dont change",
    "answer": "A pure functional component guarentees that the return will be the same when passed in parameters that dont change",
    "contributor": "Akshay Nair"
  },
  {
    "queId": "220",
    "courseName": "Using React Hooks",
    "question": "When building a React tree of components, what does \"prop drilling\" refer to in the React app itself?",
    "optOne": "Deleting a property so deep it can never be recovered",
    "optTwo": "Referencing a property by refernce instead by value",
    "optThree": "Passing properties through one or more layers of a component hierachy",
    "answer": "Passing properties through one or more layers of a component hierachy",
    "contributor": "Akshay Nair"
  },
  {
    "queId": "221",
    "courseName": "Using React Hooks",
    "question": "A component can have multiple useEffect hook?",
    "optOne": "TRUE",
    "optTwo": "FALSE",
    "answer": "TRUE",
    "contributor": "Sharmista Deb"
  },
  {
    "queId": "222",
    "courseName": "Using React Hooks",
    "question": "Hooks cannot be used inside loops, conditions in order to:",
    "optOne": "Prevent infinite loops",
    "optTwo": "Maintain hierarchy",
    "optThree": "Keep code simple",
    "optFour": "Improve performance",
    "answer": "Maintain hierarchy",
    "contributor": "Sharmista Deb"
  },
  {
    "queId": "223",
    "courseName": "Managing React State",
    "question": "useState hook can accept an initial value from an enum variable?",
    "optOne": "TRUE",
    "optTwo": "FALSE",
    "answer": "TRUE",
    "contributor": "Sharmista Deb"
  },
  {
    "queId": "224",
    "courseName": "Managing React State",
    "question": "useReducer can be used as a replacement for which hook?",
    "optOne": "useEffect",
    "optTwo": "useRef",
    "optThree": "useState",
    "optFour": "useContext",
    "answer": "useState",
    "contributor": "Sharmista Deb"
  },
  {
    "queId": "225",
    "courseName": "Managing React State",
    "question": "which of these are form libraries?",
    "optOne": "Fromik",
    "optTwo": " React Hook Form",
    "optThree": "React Final Form",
    "optFour": "All of these",
    "answer": "All of these",
    "contributor": "Pallavi Derkar"
  }
]
